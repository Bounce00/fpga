-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of operator_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv49_10000000 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_78001 : STD_LOGIC_VECTOR (18 downto 0) := "1111000000000000001";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal uut_lfsr128_V : STD_LOGIC_VECTOR (127 downto 0) := "00000001001000110100010101100111100010011010101111001101111011110001001000110100010101100111100010011010101111001101111011110000";
    signal coarseContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce0 : STD_LOGIC;
    signal coarseContents_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce0 : STD_LOGIC;
    signal gradientContents_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal scaleLookup_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scaleLookup_ce0 : STD_LOGIC;
    signal scaleLookup_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_reg_1278 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_8_fu_351_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_reg_1287 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1297 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_374_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_1302 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_9_fu_390_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_9_reg_1310 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_22_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal normStage_cast_fu_662_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal normStage_cast_reg_1367 : STD_LOGIC_VECTOR (3 downto 0);
    signal normStage_1_fu_672_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal normStage_1_reg_1375 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_697_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_reg_1382 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal coarseContents_load_reg_1400 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_V_12_fu_1239_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_reg_1405 : STD_LOGIC_VECTOR (22 downto 0);
    signal sel_tmp10_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_reg_1410 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_3_V_fu_1011_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal noiseGen_3_V_1_fu_1050_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_3_fu_1088_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_6_fu_1104_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal centralLimitNoise_V_fu_1148_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal centralLimitNoise_V_reg_1437 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal scale_V_reg_1442 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_31_fu_1160_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_31_reg_1447 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal norm_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal norm_V_ce0 : STD_LOGIC;
    signal norm_V_we0 : STD_LOGIC;
    signal norm_V_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal noiseGen_V_3_reg_235 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_2_reg_247 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_2_reg_259 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_4_reg_271 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_reg_283 : STD_LOGIC_VECTOR (2 downto 0);
    signal normStage_reg_294 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_cast_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp4_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_630_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal bramChapter_3_V_1_fu_140 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_0_V_1_fu_486_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_9_fu_811_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_2_fu_144 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_1_V_1_fu_478_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_8_fu_804_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_4_fu_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel3_fu_462_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_5_fu_790_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_fu_152 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel1_fu_446_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_3_fu_776_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_15_fu_868_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_339_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast_cast_fu_335_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal op2_assign_fu_378_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_386_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal newSel_fu_438_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel2_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sel_tmp3_fu_470_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_526_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_19_fu_535_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr1_V_fu_514_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_20_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_s_fu_549_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_21_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_22_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_23_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_581_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_25_fu_584_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr2_V_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_26_fu_592_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_6_fu_598_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_27_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_28_fu_612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_29_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_24_fu_575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_30_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal normStage_cast1_cast_fu_648_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal phitmp2_fu_678_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_318_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_687_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_691_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal op2_assign_2_fu_706_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal op2_assign_2_cast_fu_712_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_14_fu_716_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_1_fu_722_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_1_cast_fu_728_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_732_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_738_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal op2_assign_3_fu_748_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_3_cast_fu_753_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_16_fu_757_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_10_fu_763_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel15_fu_769_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel16_fu_783_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_7_fu_797_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_cast_cast_fu_818_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_821_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_cast_cast_fu_851_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_854_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_cast_fu_864_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sel_tmp7_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_917_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_14_fu_914_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_11_cast_fu_924_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp4_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_0_V_fu_928_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp6_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_0_V_2_fu_934_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_cond2_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_978_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel5_fu_990_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_cond4_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_1003_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel8_fu_1019_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel9_fu_1027_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel7_fu_1035_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel10_fu_1042_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel11_fu_1058_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel12_fu_1066_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel13_fu_1073_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel14_fu_1080_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp13_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_3_V_5_fu_1096_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_3_cast_fu_1116_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_2_cast_fu_1112_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_1128_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_fu_1120_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_14_fu_1124_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp1_fu_1138_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp184_cast_fu_1144_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp183_cast_fu_1134_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_31_fu_1160_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_31_fu_1160_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_fu_1166_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_fu_1169_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_20_fu_1185_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundedNoise_V_fu_1175_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal saturatedNoise_V_1_fu_1217_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal saturatedNoise_V_fu_1207_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_12_fu_1239_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_12_fu_1239_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_31_fu_1160_p10 : STD_LOGIC_VECTOR (47 downto 0);

    component awgn_top_mux_42_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (8 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component awgn_top_mul_mul_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component operator_s_coarsebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component operator_s_gradiecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component operator_s_scaleLdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component operator_s_norm_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    coarseContents_U : component operator_s_coarsebkb
    generic map (
        DataWidth => 17,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coarseContents_address0,
        ce0 => coarseContents_ce0,
        q0 => coarseContents_q0);

    gradientContents_U : component operator_s_gradiecud
    generic map (
        DataWidth => 13,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradientContents_address0,
        ce0 => gradientContents_ce0,
        q0 => gradientContents_q0);

    scaleLookup_U : component operator_s_scaleLdEe
    generic map (
        DataWidth => 17,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scaleLookup_address0,
        ce0 => scaleLookup_ce0,
        q0 => scaleLookup_q0);

    norm_V_U : component operator_s_norm_V
    generic map (
        DataWidth => 15,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => norm_V_address0,
        ce0 => norm_V_ce0,
        we0 => norm_V_we0,
        d0 => norm_V_d0,
        q0 => norm_V_q0);

    awgn_top_mux_42_9_1_U0 : component awgn_top_mux_42_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        din4_WIDTH => 9,
        din5_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din1 => bramChapter_3_V_1_fu_140,
        din2 => bramChapter_3_V_2_fu_144,
        din3 => bramChapter_3_V_4_fu_148,
        din4 => bramChapter_3_V_fu_152,
        din5 => tmp_21_reg_1302,
        dout => grp_fu_318_p6);

    awgn_top_mul_mul_eOg_U1 : component awgn_top_mul_mul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        din0 => r_V_12_fu_1239_p0,
        din1 => tmp_23_reg_1382,
        dout => r_V_12_fu_1239_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bramChapter_3_V_1_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
                bramChapter_3_V_1_fu_140 <= bramChapter_3_V_9_fu_811_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then 
                bramChapter_3_V_1_fu_140 <= bramChapter_0_V_1_fu_486_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_2_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
                bramChapter_3_V_2_fu_144 <= bramChapter_3_V_8_fu_804_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then 
                bramChapter_3_V_2_fu_144 <= bramChapter_1_V_1_fu_478_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_4_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
                bramChapter_3_V_4_fu_148 <= bramChapter_3_V_5_fu_790_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then 
                bramChapter_3_V_4_fu_148 <= newSel3_fu_462_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
                bramChapter_3_V_fu_152 <= bramChapter_3_V_3_fu_776_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then 
                bramChapter_3_V_fu_152 <= newSel1_fu_446_p3;
            end if; 
        end if;
    end process;

    i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                i_reg_283 <= i_1_reg_1297;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_283 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    normStage_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                normStage_reg_294 <= normStage_1_reg_1375;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then 
                normStage_reg_294 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                centralLimitNoise_V_reg_1437 <= centralLimitNoise_V_fu_1148_p2;
                scale_V_reg_1442 <= scaleLookup_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                coarseContents_load_reg_1400 <= coarseContents_q0;
                r_V_12_reg_1405 <= r_V_12_fu_1239_p2;
                sel_tmp10_reg_1410 <= sel_tmp10_fu_908_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_1_reg_1297 <= i_1_fu_368_p2;
                tmp_8_reg_1287 <= tmp_8_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                noiseGen_3_V_2_reg_259 <= noiseGen_3_V_3_fu_1088_p3;
                noiseGen_3_V_4_reg_271 <= noiseGen_3_V_6_fu_1104_p3;
                noiseGen_V_2_reg_247 <= noiseGen_3_V_1_fu_1050_p3;
                noiseGen_V_3_reg_235 <= noiseGen_3_V_fu_1011_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                normStage_1_reg_1375 <= normStage_1_fu_672_p2;
                    normStage_cast_reg_1367(2 downto 0) <= normStage_cast_fu_662_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0))) then
                or_cond_reg_1351 <= or_cond_fu_432_p2;
                r_V_9_reg_1310 <= r_V_9_fu_390_p2;
                sel_tmp1_reg_1333 <= sel_tmp1_fu_420_p2;
                sel_tmp2_reg_1340 <= sel_tmp2_fu_426_p2;
                sel_tmp_reg_1325 <= sel_tmp_fu_414_p2;
                tmp_21_reg_1302 <= tmp_21_fu_374_p1;
                tmp_22_reg_1316 <= r_V_9_fu_390_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                p_Val2_s_reg_1278 <= uut_lfsr128_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                r_V_31_reg_1447 <= r_V_31_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond_fu_666_p2)))) then
                tmp_23_reg_1382 <= tmp_23_fu_697_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond1_fu_362_p2 = ap_const_lv1_0)))) then
                uut_lfsr128_V <= p_Result_s_fu_630_p3;
            end if;
        end if;
    end process;
    normStage_cast_reg_1367(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_362_p2, exitcond_fu_666_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((exitcond1_fu_362_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_666_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        saturatedNoise_V_1_fu_1217_p3 when (tmp_6_fu_1225_p2(0) = '1') else 
        saturatedNoise_V_fu_1207_p4;
    bramChapter_0_V_1_fu_486_p3 <= 
        ap_const_lv9_0 when (sel_tmp2_fu_426_p2(0) = '1') else 
        bramChapter_3_V_1_fu_140;
    bramChapter_1_V_1_fu_478_p3 <= 
        bramChapter_3_V_2_fu_144 when (sel_tmp2_fu_426_p2(0) = '1') else 
        sel_tmp3_fu_470_p3;
    bramChapter_3_V_10_fu_763_p2 <= std_logic_vector(unsigned(r_V_16_fu_757_p2) + unsigned(grp_fu_318_p6));
    bramChapter_3_V_3_fu_776_p3 <= 
        bramChapter_3_V_fu_152 when (or_cond_reg_1351(0) = '1') else 
        newSel15_fu_769_p3;
    bramChapter_3_V_5_fu_790_p3 <= 
        bramChapter_3_V_4_fu_148 when (or_cond_reg_1351(0) = '1') else 
        newSel16_fu_783_p3;
    bramChapter_3_V_7_fu_797_p3 <= 
        bramChapter_3_V_10_fu_763_p2 when (sel_tmp1_reg_1333(0) = '1') else 
        bramChapter_3_V_2_fu_144;
    bramChapter_3_V_8_fu_804_p3 <= 
        bramChapter_3_V_2_fu_144 when (sel_tmp2_reg_1340(0) = '1') else 
        bramChapter_3_V_7_fu_797_p3;
    bramChapter_3_V_9_fu_811_p3 <= 
        bramChapter_3_V_10_fu_763_p2 when (sel_tmp2_reg_1340(0) = '1') else 
        bramChapter_3_V_1_fu_140;
    centralLimitNoise_V_fu_1148_p2 <= std_logic_vector(signed(tmp184_cast_fu_1144_p1) + signed(tmp183_cast_fu_1134_p1));
    coarseContents_address0 <= tmp_13_fu_700_p1(9 - 1 downto 0);

    coarseContents_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            coarseContents_ce0 <= ap_const_logic_1;
        else 
            coarseContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_362_p2 <= "1" when (i_reg_283 = ap_const_lv3_4) else "0";
    exitcond_fu_666_p2 <= "1" when (normStage_reg_294 = ap_const_lv3_4) else "0";
    gradientContents_address0 <= tmp_13_fu_700_p1(9 - 1 downto 0);

    gradientContents_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            gradientContents_ce0 <= ap_const_logic_1;
        else 
            gradientContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_368_p2 <= std_logic_vector(unsigned(i_reg_283) + unsigned(ap_const_lv3_1));
    i_cast_cast_fu_335_p1 <= std_logic_vector(resize(unsigned(i_reg_283),6));
    icmp_fu_1195_p2 <= "1" when (signed(tmp_20_fu_1185_p4) > signed(ap_const_lv4_0)) else "0";
    lfsr1_V_fu_514_p4 <= p_Val2_s_reg_1278(127 downto 64);
    lfsr2_V_fu_523_p1 <= p_Val2_s_reg_1278(64 - 1 downto 0);
    newSel10_fu_1042_p3 <= 
        noiseGen_V_2_reg_247 when (or_cond3_fu_985_p2(0) = '1') else 
        newSel9_fu_1027_p3;
    newSel11_fu_1058_p3 <= 
        noiseGen_0_V_fu_928_p2 when (sel_tmp12_fu_959_p2(0) = '1') else 
        noiseGen_3_V_2_reg_259;
    newSel12_fu_1066_p3 <= 
        noiseGen_3_V_2_reg_259 when (sel_tmp10_reg_1410(0) = '1') else 
        noiseGen_0_V_2_fu_934_p2;
    newSel13_fu_1073_p3 <= 
        noiseGen_3_V_2_reg_259 when (sel_tmp2_reg_1340(0) = '1') else 
        newSel11_fu_1058_p3;
    newSel14_fu_1080_p3 <= 
        newSel12_fu_1066_p3 when (or_cond3_fu_985_p2(0) = '1') else 
        noiseGen_3_V_2_reg_259;
    newSel15_fu_769_p3 <= 
        bramChapter_3_V_fu_152 when (sel_tmp_reg_1325(0) = '1') else 
        bramChapter_3_V_10_fu_763_p2;
    newSel16_fu_783_p3 <= 
        bramChapter_3_V_10_fu_763_p2 when (sel_tmp_reg_1325(0) = '1') else 
        bramChapter_3_V_4_fu_148;
    newSel1_fu_446_p3 <= 
        bramChapter_3_V_fu_152 when (or_cond_fu_432_p2(0) = '1') else 
        newSel_fu_438_p3;
    newSel2_fu_454_p3 <= 
        ap_const_lv9_0 when (sel_tmp_fu_414_p2(0) = '1') else 
        bramChapter_3_V_4_fu_148;
    newSel3_fu_462_p3 <= 
        bramChapter_3_V_4_fu_148 when (or_cond_fu_432_p2(0) = '1') else 
        newSel2_fu_454_p3;
    newSel4_fu_978_p3 <= 
        noiseGen_0_V_fu_928_p2 when (sel_tmp10_reg_1410(0) = '1') else 
        noiseGen_V_3_reg_235;
    newSel5_fu_990_p3 <= 
        noiseGen_V_3_reg_235 when (sel_tmp5_fu_945_p2(0) = '1') else 
        noiseGen_0_V_2_fu_934_p2;
    newSel6_fu_1003_p3 <= 
        newSel4_fu_978_p3 when (or_cond3_fu_985_p2(0) = '1') else 
        newSel5_fu_990_p3;
    newSel7_fu_1035_p3 <= 
        noiseGen_V_2_reg_247 when (sel_tmp2_reg_1340(0) = '1') else 
        newSel8_fu_1019_p3;
    newSel8_fu_1019_p3 <= 
        noiseGen_V_2_reg_247 when (sel_tmp12_fu_959_p2(0) = '1') else 
        noiseGen_0_V_fu_928_p2;
    newSel9_fu_1027_p3 <= 
        noiseGen_0_V_2_fu_934_p2 when (sel_tmp5_fu_945_p2(0) = '1') else 
        noiseGen_V_2_reg_247;
    newSel_fu_438_p3 <= 
        bramChapter_3_V_fu_152 when (sel_tmp_fu_414_p2(0) = '1') else 
        ap_const_lv9_0;
    noiseGen_0_V_2_fu_934_p2 <= std_logic_vector(unsigned(r_V_11_cast_fu_924_p1) + unsigned(tmp_14_fu_914_p1));
    noiseGen_0_V_fu_928_p2 <= std_logic_vector(signed(tmp_14_fu_914_p1) - signed(r_V_11_cast_fu_924_p1));
    noiseGen_3_V_1_fu_1050_p3 <= 
        newSel7_fu_1035_p3 when (or_cond4_fu_998_p2(0) = '1') else 
        newSel10_fu_1042_p3;
    noiseGen_3_V_3_fu_1088_p3 <= 
        newSel13_fu_1073_p3 when (or_cond4_fu_998_p2(0) = '1') else 
        newSel14_fu_1080_p3;
    noiseGen_3_V_5_fu_1096_p3 <= 
        noiseGen_0_V_2_fu_934_p2 when (sel_tmp13_fu_963_p2(0) = '1') else 
        noiseGen_3_V_4_reg_271;
    noiseGen_3_V_6_fu_1104_p3 <= 
        noiseGen_0_V_fu_928_p2 when (sel_tmp14_fu_968_p2(0) = '1') else 
        noiseGen_3_V_5_fu_1096_p3;
    noiseGen_3_V_fu_1011_p3 <= 
        noiseGen_V_3_reg_235 when (or_cond4_fu_998_p2(0) = '1') else 
        newSel6_fu_1003_p3;
    normStage_1_fu_672_p2 <= std_logic_vector(unsigned(normStage_reg_294) + unsigned(ap_const_lv3_1));
    normStage_cast1_cast_fu_648_p1 <= std_logic_vector(resize(unsigned(normStage_reg_294),6));
    normStage_cast_fu_662_p1 <= std_logic_vector(resize(unsigned(normStage_reg_294),4));

    norm_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_8_cast_fu_357_p1, tmp_26_cast_fu_657_p1, tmp_28_cast_fu_826_p1, phitmp4_fu_742_p2, tmp_27_cast_fu_859_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = phitmp4_fu_742_p2)))) then 
            norm_V_address0 <= tmp_27_cast_fu_859_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
            norm_V_address0 <= tmp_28_cast_fu_826_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            norm_V_address0 <= tmp_26_cast_fu_657_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            norm_V_address0 <= tmp_8_cast_fu_357_p1(5 - 1 downto 0);
        else 
            norm_V_address0 <= "XXXXX";
        end if; 
    end process;


    norm_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, phitmp4_fu_742_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = phitmp4_fu_742_p2))))) then 
            norm_V_ce0 <= ap_const_logic_1;
        else 
            norm_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_V_d0_assign_proc : process(ap_CS_fsm_state2, r_V_9_fu_390_p2, norm_V_q0, ap_CS_fsm_state4, phitmp4_fu_742_p2, r_V_15_fu_868_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = phitmp4_fu_742_p2)))) then 
            norm_V_d0 <= r_V_15_fu_868_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2))) then 
            norm_V_d0 <= norm_V_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            norm_V_d0 <= r_V_9_fu_390_p2(29 downto 15);
        else 
            norm_V_d0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    norm_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_362_p2, ap_CS_fsm_state4, phitmp4_fu_742_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_362_p2 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = phitmp4_fu_742_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = phitmp4_fu_742_p2))))) then 
            norm_V_we0 <= ap_const_logic_1;
        else 
            norm_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    op2_assign_1_cast_fu_728_p1 <= std_logic_vector(resize(unsigned(op2_assign_1_fu_722_p2),15));
    op2_assign_1_fu_722_p2 <= (r_V_14_fu_716_p2 xor ap_const_lv4_F);
    op2_assign_2_cast_fu_712_p1 <= std_logic_vector(resize(unsigned(op2_assign_2_fu_706_p2),4));
    op2_assign_2_fu_706_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) - unsigned(normStage_reg_294));
    op2_assign_3_cast_fu_753_p1 <= std_logic_vector(resize(unsigned(op2_assign_3_fu_748_p2),9));
    op2_assign_3_fu_748_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(normStage_cast_reg_1367));
    op2_assign_fu_378_p3 <= (tmp_21_fu_374_p1 & ap_const_lv5_0);
    or_cond2_fu_972_p2 <= (sel_tmp12_fu_959_p2 or sel_tmp11_fu_955_p2);
    or_cond3_fu_985_p2 <= (sel_tmp10_reg_1410 or sel_tmp6_fu_950_p2);
    or_cond4_fu_998_p2 <= (sel_tmp2_reg_1340 or or_cond2_fu_972_p2);
    or_cond_fu_432_p2 <= (sel_tmp2_fu_426_p2 or sel_tmp1_fu_420_p2);
        p_2_cast_fu_1112_p1 <= std_logic_vector(resize(signed(noiseGen_3_V_4_reg_271),30));

        p_3_cast_fu_1116_p1 <= std_logic_vector(resize(signed(noiseGen_3_V_2_reg_259),30));

    p_Result_s_fu_630_p3 <= (r_V_24_fu_575_p2 & r_V_30_fu_624_p2);
    p_shl_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_339_p3),6));
    phitmp2_fu_678_p4 <= r_V_9_reg_1310(14 downto 10);
    phitmp4_fu_742_p2 <= "1" when (tmp_24_fu_738_p1 = ap_const_lv9_0) else "0";
    r_V_11_cast_fu_924_p1 <= std_logic_vector(resize(unsigned(r_V_13_fu_917_p3),29));
    r_V_12_fu_1239_p0 <= r_V_12_fu_1239_p00(13 - 1 downto 0);
    r_V_12_fu_1239_p00 <= std_logic_vector(resize(unsigned(gradientContents_q0),23));
    r_V_13_fu_917_p3 <= (coarseContents_load_reg_1400 & ap_const_lv10_0);
    r_V_14_fu_716_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & op2_assign_2_cast_fu_712_p1(4-1 downto 0)))));
    r_V_15_fu_868_p2 <= std_logic_vector(shift_left(unsigned(norm_V_q0),to_integer(unsigned('0' & tmp_39_cast_fu_864_p1(15-1 downto 0)))));
    r_V_16_fu_757_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv9_1),to_integer(unsigned('0' & op2_assign_3_cast_fu_753_p1(9-1 downto 0)))));
    r_V_19_fu_535_p3 <= (tmp_9_fu_526_p4 & ap_const_lv34_0);
    r_V_20_fu_543_p2 <= (r_V_19_fu_535_p3 xor lfsr1_V_fu_514_p4);
    r_V_21_fu_559_p1 <= std_logic_vector(resize(unsigned(r_V_s_fu_549_p4),64));
    r_V_22_fu_563_p2 <= (r_V_21_fu_559_p1 xor r_V_20_fu_543_p2);
    r_V_23_fu_569_p2 <= std_logic_vector(shift_left(unsigned(r_V_22_fu_563_p2),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    r_V_24_fu_575_p2 <= (r_V_23_fu_569_p2 xor r_V_22_fu_563_p2);
    r_V_25_fu_584_p3 <= (tmp_18_fu_581_p1 & ap_const_lv58_0);
    r_V_26_fu_592_p2 <= (r_V_25_fu_584_p3 xor lfsr2_V_fu_523_p1);
    r_V_27_fu_608_p1 <= std_logic_vector(resize(unsigned(r_V_6_fu_598_p4),64));
    r_V_28_fu_612_p2 <= (r_V_27_fu_608_p1 xor r_V_26_fu_592_p2);
    r_V_29_fu_618_p2 <= std_logic_vector(shift_left(unsigned(r_V_28_fu_612_p2),to_integer(unsigned('0' & ap_const_lv64_7(31-1 downto 0)))));
    r_V_30_fu_624_p2 <= (r_V_29_fu_618_p2 xor r_V_28_fu_612_p2);
    r_V_31_fu_1160_p0 <= centralLimitNoise_V_reg_1437;
    r_V_31_fu_1160_p1 <= r_V_31_fu_1160_p10(17 - 1 downto 0);
    r_V_31_fu_1160_p10 <= std_logic_vector(resize(unsigned(scale_V_reg_1442),48));
    r_V_31_fu_1160_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(r_V_31_fu_1160_p0) * signed('0' &r_V_31_fu_1160_p1))), 48));
    r_V_6_fu_598_p4 <= r_V_26_fu_592_p2(63 downto 13);
    r_V_9_fu_390_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_reg_1278),to_integer(unsigned('0' & tmp_7_fu_386_p1(31-1 downto 0)))));
    r_V_fu_1169_p2 <= std_logic_vector(unsigned(ap_const_lv49_10000000) + unsigned(tmp_2_fu_1166_p1));
    r_V_s_fu_549_p4 <= r_V_20_fu_543_p2(63 downto 35);
    roundedNoise_V_fu_1175_p4 <= r_V_fu_1169_p2(47 downto 29);
    saturatedNoise_V_1_fu_1217_p3 <= 
        ap_const_lv16_7FFF when (icmp_fu_1195_p2(0) = '1') else 
        ap_const_lv16_8001;
    saturatedNoise_V_fu_1207_p4 <= r_V_fu_1169_p2(44 downto 29);
    scaleLookup_address0 <= tmp_s_fu_644_p1(8 - 1 downto 0);

    scaleLookup_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            scaleLookup_ce0 <= ap_const_logic_1;
        else 
            scaleLookup_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp10_fu_908_p2 <= (tmp13_fu_903_p2 and tmp12_fu_897_p2);
    sel_tmp11_fu_955_p2 <= (tmp_22_reg_1316 and sel_tmp_reg_1325);
    sel_tmp12_fu_959_p2 <= (tmp_22_reg_1316 and sel_tmp1_reg_1333);
    sel_tmp13_fu_963_p2 <= (sel_tmp2_reg_1340 and sel_tmp4_fu_940_p2);
    sel_tmp14_fu_968_p2 <= (tmp_22_reg_1316 and sel_tmp2_reg_1340);
    sel_tmp1_fu_420_p2 <= "1" when (tmp_21_fu_374_p1 = ap_const_lv2_1) else "0";
    sel_tmp2_fu_426_p2 <= "1" when (tmp_21_fu_374_p1 = ap_const_lv2_0) else "0";
    sel_tmp3_fu_470_p3 <= 
        ap_const_lv9_0 when (sel_tmp1_fu_420_p2(0) = '1') else 
        bramChapter_3_V_2_fu_144;
    sel_tmp4_fu_940_p2 <= (tmp_22_reg_1316 xor ap_const_lv1_1);
    sel_tmp5_fu_945_p2 <= (sel_tmp_reg_1325 and sel_tmp4_fu_940_p2);
    sel_tmp6_fu_950_p2 <= (sel_tmp1_reg_1333 and sel_tmp4_fu_940_p2);
    sel_tmp7_fu_882_p2 <= "0" when (tmp_21_reg_1302 = ap_const_lv2_0) else "1";
    sel_tmp8_fu_887_p2 <= "0" when (tmp_21_reg_1302 = ap_const_lv2_1) else "1";
    sel_tmp9_fu_892_p2 <= "0" when (tmp_21_reg_1302 = ap_const_lv2_2) else "1";
    sel_tmp_fu_414_p2 <= "1" when (tmp_21_fu_374_p1 = ap_const_lv2_2) else "0";
    tmp12_fu_897_p2 <= (sel_tmp7_fu_882_p2 and sel_tmp8_fu_887_p2);
    tmp13_fu_903_p2 <= (tmp_22_reg_1316 and sel_tmp9_fu_892_p2);
        tmp183_cast_fu_1134_p1 <= std_logic_vector(resize(signed(tmp_fu_1128_p2),31));

        tmp184_cast_fu_1144_p1 <= std_logic_vector(resize(signed(tmp1_fu_1138_p2),31));

    tmp1_fu_1138_p2 <= std_logic_vector(signed(tmp_cast_fu_1120_p1) + signed(tmp_cast_14_fu_1124_p1));
    tmp_11_fu_687_p1 <= std_logic_vector(resize(unsigned(phitmp2_fu_678_p4),9));
    tmp_12_fu_691_p2 <= std_logic_vector(unsigned(grp_fu_318_p6) + unsigned(tmp_11_fu_687_p1));
    tmp_13_fu_700_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_691_p2),32));
        tmp_14_fu_914_p1 <= std_logic_vector(resize(signed(r_V_12_reg_1405),29));

    tmp_15_fu_732_p2 <= std_logic_vector(shift_right(unsigned(norm_V_q0),to_integer(unsigned('0' & op2_assign_1_cast_fu_728_p1(15-1 downto 0)))));
    tmp_16_fu_854_p2 <= std_logic_vector(unsigned(tmp_8_reg_1287) + unsigned(tmp_38_cast_cast_fu_851_p1));
    tmp_18_fu_581_p1 <= p_Val2_s_reg_1278(6 - 1 downto 0);
    tmp_19_fu_821_p2 <= std_logic_vector(unsigned(tmp_8_reg_1287) + unsigned(tmp_42_cast_cast_fu_818_p1));
    tmp_20_fu_1185_p4 <= r_V_fu_1169_p2(47 downto 44);
    tmp_21_fu_374_p1 <= i_reg_283(2 - 1 downto 0);
    tmp_23_fu_697_p1 <= r_V_9_reg_1310(10 - 1 downto 0);
    tmp_24_fu_738_p1 <= tmp_15_fu_732_p2(9 - 1 downto 0);
    tmp_26_cast_fu_657_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_652_p2),32));
    tmp_27_cast_fu_859_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_854_p2),32));
    tmp_28_cast_fu_826_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_821_p2),32));
    tmp_2_fu_1166_p1 <= std_logic_vector(resize(unsigned(r_V_31_reg_1447),49));
    tmp_38_cast_cast_fu_851_p1 <= std_logic_vector(resize(unsigned(normStage_1_reg_1375),6));
    tmp_39_cast_fu_864_p1 <= std_logic_vector(resize(unsigned(r_V_14_fu_716_p2),15));
    tmp_3_fu_339_p3 <= (i_reg_283 & ap_const_lv2_0);
    tmp_42_cast_cast_fu_818_p1 <= std_logic_vector(resize(unsigned(normStage_1_reg_1375),6));
    tmp_4_fu_652_p2 <= std_logic_vector(unsigned(tmp_8_reg_1287) + unsigned(normStage_cast1_cast_fu_648_p1));
    tmp_5_fu_1201_p2 <= "1" when (signed(roundedNoise_V_fu_1175_p4) < signed(ap_const_lv19_78001)) else "0";
    tmp_6_fu_1225_p2 <= (icmp_fu_1195_p2 or tmp_5_fu_1201_p2);
    tmp_7_fu_386_p1 <= std_logic_vector(resize(unsigned(op2_assign_fu_378_p3),128));
    tmp_8_cast_fu_357_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_351_p2),32));
    tmp_8_fu_351_p2 <= std_logic_vector(unsigned(i_cast_cast_fu_335_p1) + unsigned(p_shl_cast_fu_347_p1));
    tmp_9_fu_526_p4 <= p_Val2_s_reg_1278(93 downto 64);
        tmp_cast_14_fu_1124_p1 <= std_logic_vector(resize(signed(noiseGen_V_3_reg_235),30));

        tmp_cast_fu_1120_p1 <= std_logic_vector(resize(signed(noiseGen_V_2_reg_247),30));

    tmp_fu_1128_p2 <= std_logic_vector(signed(p_3_cast_fu_1116_p1) + signed(p_2_cast_fu_1112_p1));
    tmp_s_fu_644_p1 <= std_logic_vector(resize(unsigned(snr_V_read),32));
end behav;
